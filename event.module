<?php
// $Id$

/**
 * System hook
 *
 */
function event_system($field){
  $system["description"] = t("Enables users to maintain an event calendar.");
  return $system[$field];
}

/**
 * Define the event module permissions
 *
 * @return (array) array of permissions
 */
function event_perm() {
  return array("access events", "administer events", "post events");
}

/**
 * Drupal configuration options
 *
 * @return (string) XHTML output/form
 */
function event_settings() {
 $output .= form_textarea("Explanation or submission guidelines", "event_help", variable_get("event_help", ""), 70, 5, "This text will be displayed at the top of the event submission form.  Useful for helping or instructing your users.");  
  $sunmon = array("0" => t("Sunday"), "1" => t("Monday") );
  $output .= form_select(t("Start of week"), "event_week", variable_get("event_week", "0"), $sunmon , t("The day the weeks starts in the block calendar."));
  return $output;
}

/**
 * Node information
 *
 * @param (string) $field information field to return
 * @return (string) information field
 */
function event_node($field) {
  $info["name"] = t("event");
  $info["description"] = t("An event contains information on an event in real life.");

  return $info[$field];
}

/**
 * Add links to the node system and other places in Drupal
 *
 * @param (string) $type link type
 * @param (object) $node node object
 * @param (bool) $main front page
 * @return (array) array of links
 */
function event_link($type, $node = 0, $main) {
  // This function is called by different modules to retrieve links.
  // All values have to be returned in a $links[] array of strings.
  // The different if-then-else statements help dermin what type of links are
  // requested.

  if ($type == "page" && user_access("access events")) {
    // Page links requested. These are the links on every page like home, submit, etc.
    // Return links to event_page().
    $links[] = l(t("events"), "event", array("title" => t("Show events")));
  }

  if ($type == "menu.create" && user_access("post events")) {
    $links[] = l(t("create event"), "node/add/event", array("title" => t("Add a new event.")));
  }

  // Return all the links, or an empty array if there are none.
  return $links ? $links : array();
}

function event_validate(&$node) {
  // Set node->start based on the form if necessary
  if (!$node->start && isset($node->year) && isset($node->month) && isset($node->day) && isset($node->hour) && isset($node->minute)) {
    $node->start = strtotime($node->year ."-". $node->month ."-". $node->day ." ". $node->hour .":". $node->minute);
  }
}

function event_insert(&$node) {
  db_query("INSERT INTO event (nid, start, location) VALUES ($node->nid, $node->start, '" . check_query($node->location) . "')");
}

function event_update(&$node) {
  db_query("UPDATE event SET start = $node->start, location = '" . check_query($node->location) . "' WHERE nid = $node->nid");
}

function event_delete(&$node) {
  db_query("DELETE FROM event WHERE nid = '$node->nid'");
}

/**
 * Node _load hook to load the event node properly.
 *
 * @param (object) $node node object
 * @return (object) additional node data
 */
function event_load(&$node) {

  $event = db_fetch_object(db_query("SELECT start, location FROM event WHERE nid = $node->nid"));

  return $event;
}

/**
 * Function to determine whether a user has access to this node or not.
 * 
 * Return 0 (or False) if the user should be denied access.
 * Return Any other value if the user should be granted access.
 */
function event_access($op, $node) {
  global $user;
  
  // For node view allow access if the node status is approved and they have access permissions
  if ($op == "view") {
    return ($node->status && user_access("access events"));
  }

  // For create access if theuser has create permissions
  if ($op == "create") {
    return user_access("post events") || _image_can_personal();
  }

  // Only allow the creator of the node to update it
  if ($op == "update") {
    return ($user->uid == $node->uid);
  }

  // Only allow the creator of the node to delete it
  if ($op == "delete") {
    return ($user->uid == $node->uid);
  }
}

/**
 * Node _view hook to show the event node properly.
 *
 * @param (object) $node node object
 * @param (boolean) $main is the node on the front page
 */
function event_view(&$node, $main = 0) {
  // This function is called by node.module when an event node is viewed. This
  // lets event.module do some processing to the node before outputting it.
  $node->teaser = check_output($node->teaser);
  $node->body = check_output($node->body);

  // Output the node for the user to take a peek at it.
  theme("node_event", $node, $main);
}

/**
 * Theme event function to supply a default rendering of 
 * an event.  This function can be implemented in a .theme
 * object to override this function.
 *
 * @param (object) $node node object
 * @param (boolean) $main is the node on the front page
 */
function node_event($node, $main) {
  if (module_exist("taxonomy")) {
    $terms = taxonomy_link("taxonomy terms", $node);
  }
  
  $output  = strtr(t("<b>%title</b> by %name."), array("%title" => $node->title, "%name" => format_name($node))) ."<br />";
  
  if (count($terms)) {
    $output .= "<small>(" . theme("links", $terms) . ")</small><br />";
  }
  
  if ($main && $node->teaser) {
    $output .= $node->teaser;
  }
  else {
    $output .= $node->body;
  }
  
  $output .= "<br /> ". strtr(t("%date at %location."), array("%date" => format_date($node->start, "large"), "%location" => $node->location))  ."<br />";
  
  if ($links = link_node($node, $main)) {
    $output .= "<br />[ " . theme("links", $links) . " ]";
  }
  
  $output .= "<hr />";
  
  print $output;
}

/**
 * Node _form hook to display the necessary forms to add/edit
 * and event.
 *
 * @param (object) $node node object
 * @param (string) $help specify help text on form
 * @param (array) $error error messages
 * $return (string) XHTML output
 */
function event_form(&$node, &$help, &$error) {
  // This function is called when a user submits an event, or if an admin edits
  // an event. Existing values will be passed to this function, which is stored
  // in an array.
  // Construct the start time select boxes.
  $years = array(2001 => 2001, 2002 => 2002, 2003 => 2003, 2004 => 2004, 2005 => 2005);
  $months = array(1 => t("January"), t("February"), t("March"), t("April"), t("May"), t("June"), t("July"), t("August"), t("September"), t("October"), t("November"), t("December"));
  for ($i = 1; $i <= 31; $i++) $days[$i] = $i;
  for ($i = 0; $i <= 23; $i++) $hours[$i] = $i < 10 ? "0$i" : $i;
  for ($i = 0; $i <= 59; $i++) $minutes[$i] = $i < 10 ? "0$i" : $i;

  if ($node->start) {
    $node->year = date("Y", $node->start);
    $node->month = date("m", $node->start);
    $node->day = date("d", $node->start);
    $node->hour = date("H", $node->start);
    $node->minute = date("i", $node->start);
  };
  
  $output .= implode("", taxonomy_node_form("event", $node));

  $when = "<div class=\"container-inline\">";
  $when .= form_select("", "month", ($node->month ? $node->month : date("m")), $months);
  $when .= form_select("", "day", ($node->day ? $node->day : date("d")), $days) ." : ". form_select("", "hour", ($node->hour ? $node->hour : date("H")), $hours) . form_select("", "minute", ($node->minute ? $node->minute : "00"), $minutes);
  $when .= form_select("", "year", ($node->year ? $node->year : date("Y")), $years);
  $when .= "</div>";
  
  $output .= form_item(t("Start"), $when, t("When is this event taking place."));
  
  $output .= form_textfield(t("Location"), "location", $node->location, 50, 100, t("Where this event is taking place."));

  $output .= form_textarea(t("Details"), "body", $node->body, 60, 15, t("Allowed HTML tags") .": ". htmlspecialchars(variable_get("allowed_html", "")));

  $help = variable_get("event_help", "");

  // Return the form to be displayed.
  return $output;
}

function event_page() {
  $op = $_POST["op"];
  $edit = $_POST["edit"];
  
  theme("header");
  
  if (user_access("access events")) {
  
    if ($op == t("Show")) {
      $month = $edit["month"];
      $year = $edit["year"];
      $day = $edit["day"];
    } 
    else if (arg(0) == "event" && arg(3)) {
      $year = arg(1);
      $month = arg(2);
      $day = arg(3);
      $op = t("Show");
    }
    else {
      $year = arg(1);
      $month = arg(2);
      $day = 1;
      $op = "month";
    }

    $date = mktime(0, 0, 0, $month, 1, $year);
    $years = array(2001 => 2001, 2002 => 2002, 2003 => 2003, 2004 => 2004, 2005 => 2005);
    $months = array("-", t("January"), t("February"), t("March"), t("April"), t("May"), t("June"), t("July"), t("August"), t("September"), t("October"), t("November"), t("December"));
    for ($i = 1; $i <= 31; $i++) $days[$i] = $i;
  
    $form = "<div class=\"container-inline\">";
    $form .= form_select("", "year", ($year ? $year : date("Y")), $years). form_select("", "month", ($month ? $month : date("m")), $months) . form_select("", "day", ($day ? $day : date("d")), $days) . form_submit(t("Show"));
    $form .= "</div>";
  
    theme("box", t("Event Calendar"), form($form));
      
    switch ($op) {
      case "month":
        // first and last timestamp of the month
        $first = mktime(0, 0, 0, $month, 1, $year); 
        $last  = mktime(23, 59, 59, $month + 1, 0, $year);  
        break;
      case t("Show"):
        $first = mktime(0, 0, 0, $month, $day, $year); 
        $last  = mktime(23, 59, 59, $month, $day, $year);
    }  

    // Fetch event nodes for the selected month
    $result = db_query("SELECT n.nid FROM node n LEFT JOIN event e ON n.nid = e.nid WHERE n.status = 1 AND e.start >= '". $first  ."' AND e.start <= '". $last ."' AND n.type = 'event' ORDER BY e.start ASC");
    if($result){
      while ($node = db_fetch_object($result)) {
        node_view(node_load(array("nid" => $node->nid, "type" => "event")), 1);
      }
    }
  }
  
  theme("footer");
  
}

function event_search($keys) {
  global $status, $user;
  $result = db_query("SELECT n.*, b.* FROM event b LEFT JOIN node n ON n.nid = b.nid AND n.nid = b.nid WHERE (n.title LIKE '%$keys%' OR n.body LIKE '%$keys%') ORDER BY n.changed DESC LIMIT 20");
  while ($search = db_fetch_object($result)) {
    $find[] = array("title" => check_output($search->title), "link" => (user_access("administer nodes") ? "admin.php?mod=node&type=search&op=edit&id=$search->nid" : "node.php?id=$search->nid"), "user" => $search->name, "date" => $search->timestamp);
  }
  return $find;
}

function event_calendar() {
  $edit = $_POST["edit"];

  if ($edit["year"] && $edit["month"] && $edit["day"]) {  
    $requested = mktime(0, 0, 0, $edit["month"], $edit["day"], $edit["year"]);
  }
  else if (arg(0) == "event" && arg(3)) {    
    $requested = mktime(0, 0, 0, arg(2), arg(3), arg(1));
  }
  else if (arg(0) == "event") {
    $requested = mktime(0, 0, 0, arg(2), 1, arg(1));
  }
  else {
    $requested = mktime(23, 59, 59, date("n", time()), date("d", time()), date("Y", time()));
  }

  // Extract information from the given date:
  $month  = date("n", $requested);
  $year = date("Y", $requested);
  $day = date("d", $requested);
      
  // Extract today's date:
  $today = mktime(0, 0, 0, date("n", time()), date("d", time()), date("Y", time()));
 

  // Extract the timestamp of the last day of today's month:
  $thislast = mktime(23, 59, 59, date("n", time()), date("t", time()), date("Y", time()));

  // Extract first day of the month:
  $first = date("w", mktime(0, 0, 0, $month, 1, $year));

  // Extract last day of the month:
  $last = date("t", mktime(0, 0, 0, $month, 1, $year));

  // Calculate previous and next months dates and check for shorter months (28/30 days)
  $prevmonth = mktime(23, 59, 59, $month - 1, 1, $year);
  $prev = mktime(23, 59, 59, $month - 1, min(date("t", $prevmonth), $day), $year);
  $nextmonth = mktime(23, 59, 59, $month + 1, 1, $year);
  $next = mktime(23, 59, 59, $month + 1, min(date("t", $nextmonth), $day), $year);

  // Get events in this month
  $result = db_query("SELECT start FROM event WHERE start > ".mktime(0, 0, 0, $month, 1, $year)." AND start < ".$nextmonth);
  $days_with_events[] = "";
  while ($node = db_fetch_object($result)) {
    $days_with_events[] = date("d", $node->start);
  }

  // Generate calendar header:
  $output .= "\n<!-- calendar -->\n";
  $output .= "<div class=\"calendar\"><table width=\"100%\">\n";
  $output .= " <tr><td colspan=\"7\" class=\"header-month\">". l("&lt;", "event/".  date("Y/m/d", $prev)) ."&nbsp;". l(t(date("F",$requested)) ."&nbsp;". date("Y",$requested), "event/". date("Y/m",$requested)) ."&nbsp;". l("&gt;", "event/".  date("Y/m/d", $next)) ."</td></tr>\n";

  // Generate the days of the week:
  $output .= " <tr class=\"header-week\">";
  if(variable_get("event_week", "0")){
    $someday = mktime(0, 0, 0, 3, 21, 1994);
    $offset = $first - 1;
  }
  else {
    $someday = mktime(0, 0, 0, 3, 20, 1994);
    $offset = $first;
  }

  for ($i = 0; $i < 7; $i++) {
    $output .= "<td>" . substr(ucfirst(t(date("l", $someday + $i * 86400))), 0, 1) . "</td>";
  }
  $output .= "</tr>\n";

  // Initialize temporary variables:
  $nday = 1;
  $sday = $offset;

  // Loop through all the days of the month:
  while ($nday <= $last) {
    // Set up blank days for first week of the month:
    if ($offset) {
      $output .= " <tr class=\"row-week\"><td class=\"day-blank\" colspan=\"$offset\">&nbsp;</td>\n";
      $offset = 0;
    }

    // Start every week on a new line:
    if ($sday == 0) $output .=  " <tr class=\"row-week\">\n";

    // Print one cell:
    $date = mktime(0, 0, 0, $month, $nday, $year);
    if (in_array($nday , $days_with_events)) {
      $dayclass = "day-link";
      $daytext = l($nday, "event/$year/$month/$nday");
    }
    else {
      $dayclass = "day-noevent";
      $daytext = $nday;
    }
    
    if ($date == $requested) {
      $output .= "  <td class=\"day-selected\">". $daytext ."</td>\n";
    }
    else if ($date == $today) {
      $output .= "  <td class=\"day-today\">". $daytext ."</td>\n";
    }
    else {
      $output .= "  <td class=\"$dayclass\" >". $daytext ."</td>\n";
    }

    // Start every week on a new line:
    if ($sday == 6) $output .=  " </tr>\n";

    // Update temporary variables:
    $sday++;
    $sday = $sday % 7;
    $nday++;
  }

  // Complete the calendar:
  if ($sday) {
    $end = 7 - $sday;
    $output .= "  <td class=\"day-blank\" colspan=\"$end\">&nbsp;</td>\n </tr>\n";
  }
  $output .= "</table></div>\n\n";

  // Return calendar:
  return $output;
}

function event_block($op = "list", $delta = 0) {
  if ($op == "list") {
    $blocks[0]["info"] = t("Calendar to browse events");
    return $blocks;
  }
  else {
    if (user_access("access events")) {      
      $block["subject"] = t("Browse events");
      $block["content"] = event_calendar($date);
      return $block;
    }
  }
}

?>
