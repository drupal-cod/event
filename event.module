<?php
// $Id$

function event_fields() {
  /*
  ** To add extra fields you might need, add them to
  ** the file called fields.inc in the event module
  ** directory.
  */
  if (file_exists('modules/event/fields.inc')) {
    include_once 'modules/event/fields.inc';
    return event_extra_fields();
  }

  return array();
}

function event_help($section) {
  switch ($section) {
    case 'admin/system/modules#description':
      return t('Lets users make events and keep calendars.');
    case 'admin/system/modules/event':
      return t('Events are what you think you they are. Occurrences happening an a given time and place.');
    case 'node/add/event':
      return variable_get('event_help', '');
  }
}

function event_html_head() {
  return '<style type="text/css">@import url(modules/event/event.css);</style>';
}

function event_block($op = 'list', $delta = 0) {
  if ($op == 'list') {
    $blocks[0]['info'] = t('Calendar to browse events.');
    $blocks[1]['info'] = t('List of upcoming events.');
    return $blocks;
  }
  else {
    if (user_access('access content')) {
      switch ($delta) {
        case 0:
          $block['subject'] = t('Browse events');
          $block['content'] = event_calendar('event_calendar_simple', $year, $month, $day);
          return $block;
        case 1:
          $block['subject'] = t('Upcoming events');
          $block['content'] = event_block_upcoming();
          $block['content'] .= "<div class=\"more-link\">". l(t("more"),"event", array("title" => t("More events."))) ."</div>";
          return $block;
      }
    }
  }
}

function event_settings() {
  $output = form_textarea(t('Explanation or submission guidelines'), 'event_help', variable_get('event_help', ''), 70, 5, t('This text will be displayed at the top of the event submission form.  Useful for helping or instructing your users.'));
  $output .= form_select(t('Start of week'), 'event_week', variable_get('event_week', '0'), array('0' => t('Sunday'), '1' => t('Monday')), t('The day the weeks starts in the block calendar.'));
  $output .= form_radios(t('Time notation preference'), 'event_ampm', variable_get('event_ampm', '0'), array('0' => t('24h'),'1' => t('12h')), t('The time notation system used for entering event start times.')); 
  return $output;
}

function event_page() {
  $breadcrumbs = array(
    l(t('Home'), NULL),
    l(t('Events'), 'event')
  );

  if (arg(1) == 'search') {
    $breadcrumbs[] = l(t('Search'), 'event/search');
    print theme('page', event_query(), t('Search Events'), $breadcrumbs);
    return;
  }
  elseif (!arg(1)) {
    global $user;
    $time = time();
    $result = pager_query("SELECT n.nid FROM {event} e INNER JOIN {node} n USING (nid) WHERE n.status = 1 AND e.start >= $time ORDER BY e.start", variable_get("default_nodes_main", 10));
    if (db_num_rows($result)) {
      $output = "";
      $breadcrumbs[] = t('Upcoming');
      while ($node = db_fetch_object($result)) {
        $output .= node_view(node_load($node), 1);
      }
      $output .= theme("pager", NULL, variable_get("default_nodes_main", 10));
      print theme('page', $output, t("Upcoming Events"), $breadcrumbs);
      return;
    }
  }

  // Show calendar by default
  $year = arg(1); $month = arg(2); $day = arg(3);
  $output = '<div id="event">';
  $output .= event_calendar('event_calendar_expanded', $year, $month, $day, 1);
  $output .= theme('links', array( l(t('search events'), "event/search") ));
  $output .= '</div>';

  $timestamp = gmmktime(0, 0, 0, $month, $day, $year);
  $breadcrumbs[] = l($year, "event/$year");
  $breadcrumbs[] = l(format_date($timestamp, 'custom', 'F'), "event/$year/$month");
  print theme('page', $output, t('Events'), $breadcrumbs);
}

function event_perm() {
  return array('maintain events');
}

function event_link($type, $node = 0, $main) {

  switch ($type) {
    case 'node':
      if ($node->type == 'event') {
        if (node_access('update', $node) && !user_access('administer nodes')) {
          $links[] = l(t('edit event'), "node/edit/$node->nid", array('title' => t('Edit this event.')));
        }
        else {
          $links[] = l(t('calendar'), 'event/'. format_date($node->start, 'custom', 'Y/m/d'));
        }
      }
      break;
    case 'page':
      if (user_access('access content')) {
        $links[] = l(t('events'), 'event', array('title' => t('Show events')));
      }
      break;
    case 'system':
      drupal_set_html_head(event_html_head());
      if (user_access('maintain events')) {
        menu('node/add/event', t('event'), 'node_page');
      }
      if (user_access('access content')) {
        menu('event', t('events'), 'event_page', 1);
        menu('event/'. format_date(time(), 'custom', 'Y/m/d'), t('calendar'), 'event_page');
        menu('event/search', t('search'), 'event_page', 1);
      }
  }

  return $links ? $links : array();
}

/*
** Node functions.
*/

function event_node_name() {
  return t('event');
}

function event_access($op, &$node) {
  global $user;
  switch ($op) {
    case 'view':
      return $node->status;
    case 'create':
      return user_access('maintain events');
    case 'update':
      return $user->uid == $node->uid && user_access('maintain events');
    case 'delete':
      return $user->uid == $node->uid && user_access('maintain events');
  }
}

function event_validate(&$node) {
  // Re-calculate $node->start if we have all the parameters.
  if (isset($node->year) && isset($node->month) && isset($node->day) && isset($node->hour) && isset($node->minute)) {
    $hour = $node->hour;
    if (variable_get('event_ampm', '0')) {
      if ($node->ampm == 'pm') {
        $hour += 12;
      }
      elseif ($hour == 12) {
        $hour -= 12;
      } 
    }
    $node->start = gmmktime($hour, $node->minute, 0, $node->month, $node->day, $node->year) - $GLOBALS['user']->timezone;
  }

  if (empty($node->start)) {
    $node->start = time();
    // Round to nearest hour:
    $node->start -= $node->start % (60 * 60);
  }

  $fields = event_fields();
  foreach ($fields as $field => $def) {
    if ($def[2] && empty($node->$field)) {
      $error[$field] = t("Required.");
    }
  }

  return $error;
}

function event_content(&$node, $main = 0) {
  $fields = event_fields();

  $output = '<div class="event">';
  $output .= '<div class="details">';
  $output .= form_item(t('Start'), format_date($node->start));
  foreach ($fields as $field => $def) {
    if ($node->$field) {
      if ($def[0] == "select") {
        if ($def[10]) { // multi-select
          foreach ($node->$field as $val) {
            $vals[] = $def[7][$val];
          }
          $output .= form_item($def[1], implode(", ", $vals));
        }
        else {
          $output .= form_item($def[1], $def[7][$node->$field]);
        }
      }
      else {
        $output .= form_item($def[1], $node->$field);
      }
    }
  }
  $output .= '</div>';

  $node->teaser = $output . ($node->teaser ? '<div class="content">'. check_output($node->teaser) .'</div></div>' : '</div>');
  $node->body = $output . ($node->body ? '<div class="content">'. check_output($node->body) .'</div></div>' : '</div>');

  return $node;
}

function event_view(&$node, $main = 0, $page = 0) {
  $node = event_content($node, $main);
  if ($page) {
    // Breadcrumb navigation
    $breadcrumb[] = l(t('Home'), NULL);
    $breadcrumb[] = l(t('Events'), 'event');
    drupal_set_breadcrumb($breadcrumb);
  }
  return theme('node', $node, $main, $page);
}

function event_form_date($timestamp, $prefix = '') {
  // Construct the start time select boxes.
  // TODO: Make the years automatically populated instead of static.

  //determine settings for form's hour selector
  if (variable_get('event_ampm', '0')) {
    $hour_format = 'g';
    $first_hour = 1;
    $last_hour = 12;
  }
  else {
    $first_hour = 0;
    $last_hour =23;
    $hour_format = 'h';
  }

  $years = array(2000 => 2000, 2001 => 2001, 2002 => 2002, 2003 => 2003, 2004 => 2004, 2005 => 2005, 2006 => 2006, 2007 => 2007, 2008 => 2008, 2009 => 2009);
  $months = array(1 => t('January'), t('February'), t('March'), t('April'), t('May'), t('June'), t('July'), t('August'), t('September'), t('October'), t('November'), t('December'));
  for ($i = 1; $i <= 31; $i++) $days[$i] = $i;
  for ($i = $first_hour; $i <= $last_hour; $i++) $hours[$i] = $i;
  for ($i = 0; $i <= 59; $i++) $minutes[$i] = $i < 10 ? "0$i" : $i;
  $am_pms = array('am' => t('am'), 'pm' => t('pm'));

  if ($timestamp) {
    // Use format_date(), it handles user timezone and locale.
    $year = format_date($timestamp, 'custom', 'Y');
    $month = format_date($timestamp, 'custom', 'm');
    $day = format_date($timestamp, 'custom', 'd');
    $hour = format_date($timestamp, 'custom', $hour_format);
    $minute = format_date($timestamp, 'custom', 'i');
    $am_pm = format_date($timestamp, 'custom', 'a');
  }

  $when = '<div class="container-inline">';
  $when .= '<div class="day">';
  $when .= form_select('', $prefix .'month', $month, $months);
  $when .= form_select('', $prefix .'day', $day, $days);
  $when .= form_select('', $prefix .'year', $year, $years);
  $when .= '</div><div class="time">';
  $when .= form_select('', $prefix .'hour', $hour, $hours);
  $when .= ':';
  $when .= form_select('', $prefix .'minute', $minute, $minutes);
  if (variable_get('event_ampm', '0')) {
    $when .= form_select('', $prefix .'ampm', $am_pm, $am_pms);
  }
  $when .= '</div></div>';

  return $when;
}

function event_form(&$node, &$error) {
  
  $output = '';
  if (module_exist('taxonomy')) {
    $output .= implode('', taxonomy_node_form('event', $node));
  }
  $output .= form_item(t('Start'), event_form_date($node->start), t('When is this event taking place.'));
  $fields = event_fields();
  foreach ($fields as $field => $def) {
    $function = "form_$def[0]";
    if (in_array($def[0], array('password', 'textfield', 'textarea'))) {
      $output .= $function($def[1], $field, $node->$field, $def[7], $def[8], $def[9] . theme_error($error[$field]), $def[10]);
    }
    else {
      $output .= $function($def[1], $field, $node->$field, $def[7], $def[8] . theme_error($error[$field]), $def[9], $def[10]);
    }
  }
  $output .= form_textarea(t('Details'), 'body', $node->body, 60, 15, filter_tips_short());

  return $output;
}

function event_create_query($fields, $node, &$v, $insert = 1) {
  $node->data  = array();
  $extra_fields = event_fields();
  foreach ($extra_fields as $field => $def) {
    if ($node->$field) {
      if ($def[3]) { // Store in separate database field
        $fields[] = $field;
      }
      else {
        $node->data[$field] = $node->$field;
      }
    }
  }
  $node->data = serialize($node->data);

  foreach ($fields as $field) {
    if ($insert) {
      $k[] = check_query($field);
      $s[] = "'%s'";
    }
    else {
      $q[] = check_query($field) ." = '%s'";
    }
    $v[] = $node->$field;
  }

  if ($insert) {
    return "INSERT INTO {event} (". implode(", ", $k) .") VALUES(". implode(", ", $s) .")";
  }
  else {
    return "UPDATE {event} SET ". implode(", ", $q) ." WHERE nid = '$node->nid'";
  }
}

function event_insert(&$node) {
  $fields = array('nid', 'start', 'data');
  $sql = event_create_query($fields, $node, $values);
  foreach ($values as $value) {
    $vals[] = is_array($value) ? serialize($value) : $value; 
  }
  db_query($sql, $vals);
}

function event_update(&$node) {
  $fields = array('start', 'data');
  $sql = event_create_query($fields, $node, $values, 0);
  foreach ($values as $value) {
    $vals[] = is_array($value) ? serialize($value) : $value; 
  }
  db_query($sql, $vals);
}

function event_delete(&$node) {
  db_query("DELETE FROM {event} WHERE nid = %d", $node->nid);
}

function event_load(&$node) {
  $event = db_fetch_object(db_query("SELECT * FROM {event} WHERE nid = %d", $node->nid));
  $extra_fields = event_fields();
  foreach ($extra_fields as $field => $def) {
    if ($def[3]) { // Stored in separate database field
      if ($def[0] == "select" && $def[10]) { // multi-select
          $event->$field = unserialize($event->$field);
      }
    }
  }
  $event->data = unserialize($event->data);
  if (is_array($event->data)) {
    foreach ($event->data as $field => $value) {
      $event->$field = $value;
    }
  }
  return $event;
}

/*
** Support functions.
*/

function event_calendar_data($year, $month, $day) {
  static $data;
  if (!is_array($data[$year][$month])) {
    global $user;
    $data[$year][$month] = array();
    $days = gmdate('j', gmmktime(0, 0, 0, $month + 1, 0, $year));
    $first = gmmktime(0, 0, 0, $month, 1, $year) + $user->timezone;
    $last = gmmktime(23, 59, 59, $month, $days, $year) + $user->timezone;

    $result = db_query("SELECT n.nid FROM {event} e INNER JOIN {node} n USING (nid) WHERE n.status = 1 AND e.start > %d AND e.start < %d ORDER BY start", $first, $last);
    while ($node = db_fetch_object($result)) {
      $node = node_load($node);
      $data[$year][$month][format_date($node->start, 'custom', 'j')][] = $node;
    }
  }

  return $data[$year][$month][$day] ? $data[$year][$month][$day] : array();
}

function event_calendar_simple($year, $month, $day, $timestamp) {
  return count(event_calendar_data($year, $month, $day)) ? l($day, "event/$year/$month/$day") : $day;
}

function event_calendar_expanded($year, $month, $day, $timestamp) {

  if (variable_get('event_ampm', '0')) {
    $date_format = 'G';
  }
  else {
    $date_format = 'ga';
  }

  $fields = event_fields();
  $output = "<div class=\"day\">$day</div>\n";
  if (count($data = event_calendar_data($year, $month, $day))) {
    foreach ($data as $node) {
      $output .= '<div class="event">';
      $output .= '<span class="time">'. format_date($node->start, 'custom', $date_format .':i') .'</span>';
      $output .= '<span class="title">'. l($node->title, "node/view/$node->nid") .'</span>';
      foreach ($fields as $field => $def) {
        if ($def[4] && $node->$field) {
          if ($node->$field) {
            $output .= "<span class=\"$field\">";
            if ($def[0] == "select") {
              if ($def[10]) { // multi-select
                foreach ($node->$field as $val) {
                  $vals[] = $def[7][$val];
                }
                $output .= implode(", ", $vals);
              }
              else {
                $output .= $def[7][$node->$field];
              }
            }
            else {
              $output .= $node->$field;
            }
            $output .= '</span>';
          }
        }
      }
      $output .= '</div>';
    }
  }
  else {
    $output .= '<div class="event-empty"></div>';
  }
  return $output;
}

function event_calendar($callback, &$year, &$month, &$day, $navigation = 0) {
  global $user;
  $time = time() + $user->timezone;
  if (!$year) {
    $year = gmdate('Y', $time);
  }
  if (!$month) {
    $month = gmdate('m', $time);
  }
  if (!$day) {
    $day = gmdate('d', $time);
  }

  // Sanitize date:
  $date = gmmktime(0, 0, 0, $month, ($day && $day < $days ? $day : 1), $year);
  $today = gmmktime(0, 0, 0, gmdate('m', $time), gmdate('j', $time), gmdate('Y', $time));

  // Extract key data from date:
  $month_name = gmdate('M', $date);
  $days = gmdate('j', gmmktime(0, 0, 0, $month + 1, 0, $year));
  $weeks = ceil($days / 7);

  // Initialize the header/week days:
  if ($navigation) {
    $prev = '<span class="prev">'. l('&laquo;', 'event/'. ($month - 1 < 1 ? $year - 1 .'/12' : "$year/". ($month - 1)) . ($day ? "/$day" : '')) .'</span>';
    $next = '<span class="next">'. l('&raquo;', 'event/'. ($month + 1 > 12 ? $year + 1 .'/1' : "$year/". ($month + 1)) . ($day ? "/$day" : '')) .'</span>';
  }
  $header = array(
    array('class' => 'prev', 'data' => $prev),
    array('class' => 'heading', 'colspan' => 5, 'data' => gmdate('F Y', $date)),
    array('class' => 'next', 'data' => $next)
  );

  // Week starts when?
  if (variable_get('event_week', 1)) {
    $day_name = array('Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun');
  }
  else {
    $day_name = array('Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat');
  }

  foreach ($day_name as $_day) {
    $row[] = array('class' => strtolower("days $_day"), 'data' => t($_day));
  }
  $rows = array($row);
  $week = 1;

  // Create table days.
  $row = array_fill(0, 6, '');
  for ($_day = 1; $_day <= $days; $_day++) {
    $timestamp = gmmktime(0, 0, 0, $month, $_day, $year);
    $week_day = gmdate('w', $timestamp);
    // Make sure we have the right day (week starts on).
    if (variable_get('event_week', 1)) {
      $week_day = $week_day == 0 ? 6 : $week_day - 1;
    }
    $row[$week_day] = array(
      'class' => strtolower("$month_name $day_name[$week_day]". ($weeks == $week ? ' lastweek' : '') . ($timestamp == $today ? ' today' : '') . ($_day == $day ? ' selected' : '')),
      'id' => strtolower($month_name . $_day),
      'data' => $callback($year, $month, $_day, $timestamp)
    );

    if ($week_day == 6 || $_day == $days) {
      $rows[] = array_pad($row, 7, '&nbsp;');
      $row = array();
      $week++;
    }
  }

  $output = '<div class="event-calendar">';
  $output .= theme("table", $header, $rows);
  $output .= '</div>';

  return $output;
}

function event_search($keys) {
  $extra_fields = event_fields();
  $query = "";
  foreach ($extra_fields as $field => $def) {
    if ($def[3]) { // Stored in separate database field
        $query .= " OR e.". $field ." LIKE '%$keys%'";
    }
  }
  $result = db_query_range("SELECT n.*, e.* FROM {event} e INNER JOIN {node} n ON n.nid = e.nid WHERE (n.title LIKE '%$keys%' OR n.body LIKE '%$keys%' OR n.teaser LIKE '%$keys%' ". $query .") ORDER BY n.changed DESC", 0, 20);
  while ($search = db_fetch_object($result)) {
    $find[] = array("title" => check_output($search->title), "link" => (strstr(request_uri(), "admin") ? url("admin/node/edit/id/$search->nid") : url("node/view/$search->nid")), "user" => $search->name, "date" => $search->timestamp);
  }
  return $find;
}

function event_query() {
  switch ($_POST['op']) {
    case t('Search'):
      $result = event_query_parse((object) $_POST['edit']);

      if (db_num_rows($result)) {
        $output = theme('event_query_results', $result);
      }
      else {
        drupal_set_message(t('No matches found.'));
      }
    default:
      $output = event_query_form();
      break;
  }
  return $output;
}

function event_query_parse($edit) {
  $fields = event_fields();

  // Calculate timestamps if we have all the parameters.
  if (isset($edit->from['year']) && isset($edit->from['month']) && isset($edit->from['day']) && isset($edit->from['hour']) && isset($edit->from['minute'])) {
    $query[] = 'e.start >= '. (gmmktime($edit->from['hour'], $edit->from['minute'], 0, $edit->from['month'], $edit->from['day'], $edit->from['year']) - $GLOBALS['user']->timezone);
  }

  if (isset($edit->to['year']) && isset($edit->to['month']) && isset($edit->to['day']) && isset($edit->to['hour']) && isset($edit->to['minute'])) {
    $query[] = 'e.start <= '. (gmmktime($edit->to['hour'], $edit->to['minute'], 0, $edit->to['month'], $edit->to['day'], $edit->to['year']) - $GLOBALS['user']->timezone);
  }
  
  foreach ($fields as $field => $def) {
    if ($def[3] && $edit->$field) {
      if ($def[0] == "select" && $def[10]) { // multi-select
        foreach ($edit->$field as $value) {
          if ($value) {
            $or[] = "e.$field LIKE '%". check_query($value). "%'";
          }
        }
      }
      else {
        $and[] = "e.$field LIKE '%". check_query($edit->$field) ."%'";
      }
    }
  }
  $cond = $and ? ' AND '. implode(' AND ', $and) : '';
  $cond .= $or ? " AND (". @implode(' OR ', $or). ')' : '';

  $sql = 'SELECT n.nid FROM {event} e INNER JOIN {node} n USING (nid) WHERE n.status = 1';
  $sql .= $cond ? $cond : "";
  return db_query($sql);
}

function event_query_form() {
  $fields = event_fields();
  $output = form_group(t('Date period'), form_item(t('From'), event_form_date(time()-2*365*24*60*60, 'from][')) . form_item(t('To'), event_form_date(time()+3*365*24*60*60, 'to][')));
  
  foreach ($fields as $field => $def) {
    if ($def[3]) {
      $function = "form_$def[0]";
      if (in_array($def[0], array('password', 'textfield', 'textarea'))) {
        $output .= $function($def[1], $field, '', $def[7], $def[8], $def[9], $def[10]);
      }
      else {
        $output .= $function($def[1], $field, '', $def[7], $def[8], $def[9], $def[10]);
      }
    }
  }

  $output .= form_submit(t('Search'));
  return form($output, 'post', NULL, array ('id' => 'event-search'));
}

function theme_event_query_results($result) {
  while ($node = db_fetch_object($result)) {
    return node_view(node_load($node), 1);
  }
}

/* Two helper functions for upcoming events block */
/* Borrowed some code from weblinks.module */

function event_block_upcoming($limit = 6) {
  global $user;
  // For two hours, we display "NOW"
  $time = time()-(2*60*60);
  $result = db_query_range("SELECT n.nid, n.title, n.status, n.moderate, e.start FROM {node} n INNER JOIN {event} e on n.nid = e.nid WHERE n.type='event' AND n.status = 1 AND n.moderate = 0 AND e.start >= $time ORDER BY e.start",0,$limit);

  while ($node = db_fetch_object($result)) {
    $links[] = $node;
  }

  return theme("event_upcoming_list",$links);
}

function theme_event_upcoming_list($links) {
  if (is_array($links) && (sizeof($links) > 0)) {
    foreach ($links as $node) {

    $minutesleft = floor((  $node->start - time() ) / 60); 

    if ( $minutesleft < 0 ) 
      $timeleft = t('NOW');
    else if ( $minutesleft  == 1 ) 
      $timeleft = "1&bsp;" . t('minute');
    else if ( $minutesleft < 60 ) 
      $timeleft = $minutesleft . "&nbsp;" . t('minutes');
    else if ( $minutesleft >= 60 && $minutesleft < 120 ) 
      $timeleft = "1&nbsp;" . t('hour');
    else if ( $minutesleft < (24*60) ) 
      $timeleft = floor($minutesleft/60) . "&nbsp;" . t('hours');
    else if ( $minutesleft >= (24*60) && $minutesleft < (48*60) ) 
      $timeleft = "1&nbsp;" . t('day');  
    else 
      $timeleft = floor($minutesleft/(24*60)) . "&nbsp;" . t('days');  

       $items[] = l($node->title, "node/view/$node->nid", array("title" => $node->title)) . " ($timeleft)";
    }
    return theme("item_list",$items);
  }
}

?>
