<?php
// $Id$

/**
 * @file
 * A story-like module with event information built in.
 */

/**
 * Implementation of hook_help().
 */
function basicevent_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('A basic event type for use with the event module.');
    case 'node/add#event':
      return t('An event can be given a start and end date, thus appearing in the events calendar.');
  }
}

/**
 * Implementation of hook_menu().
 */
function basicevent_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array(
      'path'   => 'node/add/event',
      'title'  => t('event'),
      'access' => user_access('create events'));
  }

  return $items;
}

/**
 * Implementation of hook_node_name().
 */
function event_node_name($node) {
  return t('event');
}

/**
 * Implementation of hook_perm().
 */
function event_perm() {
  return array('create events', 'edit own events');
}

/**
 * Implementation of hook_access().
 */
function event_access($op, $node) {
  global $user;

  switch($op) {
    case 'create':
      $ret = user_access('create events');
      break;
    case 'update':
    case 'delete':
      if (user_access('edit own events') && ($user->uid == $node->uid)) {
        $ret = TRUE;
      }
      break;
  }
  return $ret;
}

/**
 * Implementation of hook_form().
 */
function event_form(&$node) {
  $output = '';

  if (function_exists('taxonomy_node_form')) {
    $output .= implode('', taxonomy_node_form('event', $node));
  }

  $output .= form_textarea(t('Body'), 'body', $node->body, 60, 20, '', NULL, TRUE);
  $output .= filter_form('format', $node->format);

  return $output;
}
