<?php
// $Id$

/**
 * @file
 * A story-like module with event information built in.
 */

/**
 * Implementation of hook_help().
 */
function basicevent_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('A story-like node that implements the event API automatically. Depends on the event module (4.6 or later).');
    case 'node/add#event':
      return t('An event is a story which can be given a start and end date, thus appearing in the events calendar.');
  }
}

/**
 * Implementation of hook_node_name().
 */
function event_node_name($node) {
  return t('event');
}

/**
 * Implementation of hook_perm().
 */
function event_perm() {
  return array('create events', 'edit own events');
}

/**
 * Implementation of hook_access().
 */
function event_access($op, $node) {
  global $user;

  if ($op == 'create') {
    return user_access('create events');
  }

  if ($op == 'update' || $op == 'delete') {
    if (user_access('edit own events') && ($user->uid == $node->uid)) {
      return TRUE;
    }
  }
}

/**
 * Implementation of hook_menu().
 */
function basicevent_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array('path' => 'node/add/event', 'title' => t('event'),
      'access' => user_access('create events'));
  }

  return $items;
}

/**
 * Implementation of hook_form().
 */
function event_form(&$node) {
  $output = '';

  if (function_exists('taxonomy_node_form')) {
    $output .= implode('', taxonomy_node_form('event', $node));
  }
  $form['title'] = array('#type' => 'textfield', '#title' => t('Subject'), '#default_value' => $node->title, '#size' => 60, '#maxlength' => 128, '#required' => TRUE);
  $form['body'] = array(
    '#type' => 'textarea', '#title' => t('Body'), '#default_value' => $node->body, '#required' => TRUE
  );
  $form = array_merge($form, filter_form($node->format));

  if (module_exist('location') || variable_get('location_event', 0)) {

    $output .= '<div class="container-inline">';
    $output .= form_textfield(t('Location Name'), 'location][name', $node->location['name'], 64, 64, t('e.g. a place of business, venue, meeting point'));
    $output .= "</div>\n";
  }

  return $form;
}

/*
 * Implementation of hook_init()
 */
function basicevent_init() {
    if (!variable_get('event_nodeapi_event', FALSE)) {
    variable_set('event_nodeapi_event', 'all');
    db_query("DELETE FROM {cache}"); 
        watchdog('regular', t('Initialized event as event bearing module'));
    }

  if (module_exist('location') && !variable_get('location_event', 0)) {
    variable_set('location_event', 1);
    variable_set('location_name_event', 1);
    variable_set('location_street_event', 0);
    variable_set('location_city_event', 0);
    variable_set('location_province_event', 0);
    variable_set('location_country_event', 0);
    variable_set('location_postal_code_event', 0);
  }
}

/** 
 * Implementation of hook_load()
 * 
 * Here is where we set $node->show_as_event
 * The event.module does the rest.
 */
function event_load($node) {
  if (!module_exist('location') || !variable_get('location_event', 0)) {
    $additions = array('show_as_event', variable_get('event_nodeapi_basicevent', 'all'));
    $result = db_fetch_array(db_query("SELECT name, street, additional, city, province, postal_code, country FROM {location} WHERE oid = %d and type='node'", $node->nid));
    if (is_array($result)) {
      foreach ($result as $name => $value) {
        $additions['location'][$name] = $value;
      }
    }
    return $additions;
  }
}

function basicevent_insert($node) {
  if (!module_exist('location') || !variable_get('location_event', 0)) {
    db_query("INSERT INTO {location} (oid, type, name, street, additional, city, province, postal_code, country) VALUES (%d, 'node', '%s', '%s', '%s', '%s', '%s', '%s', '%s')", 
      $node->nid, $node->location['name'], $node->location['street'], $node->location['additional'], $node->location['city'], $node->location['province'], $node->location['postal_code'], $node->location['country']);
  }
}

function basicevent_delete($node) {
  if (!module_exist('location') || !variable_get('location_event', 0)) {
    db_query("DELETE FROM {location} WHERE oid = %d and type='node'", $node->nid);
  }
}

function event_update($node) {

  if (!module_exist('location') || !variable_get('location_event', 0)) {
    db_query('LOCK TABLES {location} WRITE');
    basicevent_delete($node);
    basicevent_insert($node);
    db_query('UNLOCK TABLES');
  }
}

function event_view(&$node, $teaser = FALSE, $page = FALSE) {
  if (!module_exist('location') || !variable_get('location_event', 0)) {
    $node->body .= theme('location_event', $node->location);
  }
  $node = node_prepare($node, $teaser);
} 


function theme_location_event($location) {
  return "<div class='location'>" . $location->name . "</div>";
}

?>